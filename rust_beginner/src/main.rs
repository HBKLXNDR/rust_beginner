// Подключаем стандартную библиотеку для ввода/вывода
use std::io;

fn main() {
    // Выводим приветствие и инструкции
    println!("Простой калькулятор на Rust");
    println!("Введите выражение в формате: число оператор число");
    println!("Поддерживаемые операторы: +, -, *, /");

    // Бесконечный цикл для работы калькулятора
    loop {
        println!("\nВведите выражение (или 'выход' для завершения):");

        // Создаем пустую строку для хранения ввода пользователя
        let mut input = String::new();

        // Читаем строку ввода и обрабатываем возможные ошибки
        io::stdin()
            .read_line(&mut input) // Метод read_line принимает мутабельную ссылку на строку
            .expect("Ошибка при чтении строки"); // Обработка ошибки при чтении

        // Удаляем пробелы в начале и конце строки
        let input = input.trim();

        // Проверяем, хочет ли пользователь выйти
        if input == "выход" || input == "exit" {
            println!("Выход из программы.");
            break; // Выходим из бесконечного цикла
        }

        // Разбиваем ввод на части, используя пробелы как разделители
        let parts: Vec<&str> = input.split_whitespace().collect();

        // Проверяем, что у нас ровно 3 части (число, оператор, число)
        if parts.len() != 3 {
            println!("Неверный формат ввода. Используйте: число оператор число");
            continue; // Переходим к следующей итерации цикла
        }

        // Парсим первое число, обрабатываем ошибку, если не удалось
        let num1: f64 = match parts[0].parse() {
            Ok(num) => num, // Если парсинг успешен, возвращаем число
            Err(_) => {
                println!("Ошибка: '{}' не является числом", parts[0]);
                continue; // Если ошибка, переходим к следующей итерации
            }
        };

        // Получаем оператор
        let operator = parts[1];

        // Парсим второе число
        let num2: f64 = match parts[2].parse() {
            Ok(num) => num,
            Err(_) => {
                println!("Ошибка: '{}' не является числом", parts[2]);
                continue;
            }
        };

        // Выполняем операцию в зависимости от оператора
        let result = match operator {
            "+" => num1 + num2,
            "-" => num1 - num2,
            "*" => num1 * num2,
            "/" => {
                // Проверяем деление на ноль
                if num2 == 0.0 {
                    println!("Ошибка: деление на ноль недопустимо");
                    continue;
                }
                num1 / num2
            },
            _ => {
                // Если оператор не поддерживается
                println!("Ошибка: '{}' не является поддерживаемым оператором", operator);
                continue;
            }
        };

        // Выводим результат
        println!("Результат: {} {} {} = {}", num1, operator, num2, result);
    }
}